defmodule <%= @module %> do
    @moduledoc """
    Sample DAG Module
    """
    alias ExDag.DAG
    alias ExDag.DAG.Server
    alias ExDag.DAG.DAGTask
    alias ExDag.DAG.DAGTaskRun
    alias ExDag.DAG.Utils

    @behaviour ExDag.DAG.Handlers.DAGHandler

    require Logger

    def on_dag_completed(dag_run) do
        Utils.print_status(dag_run.dag)
        Utils.print_task_runs(dag_run.dag.task_runs)
    end

    def on_task_completed(_dag_run, task, result) do
        IO.puts("Completed task: #{inspect(task.id)} Result: #{inspect(result)}")
    end

    def on_task_started(_dag_run, task_run) do
        Logger.info("Started task #{task_run.task.id}")
    end

    def build_dag() do
        # build your DAG structure here

        start_date = DateTime.utc_now() |> DateTime.add(5, :second)
        handler = <%= @module %>TaskHandler

        dag_id = "math"

        dag =
        DAG.new(dag_id)
        |> DAG.set_default_task_handler(handler)
        |> DAG.set_handler(__MODULE__)
        |> DAG.add_task!(id: "a", data: %{op: :+})
        |> DAG.add_task!(id: "b", data: %{value: 2}, parent: "a")
        |> DAG.add_task!(id: "c", data: %{op: :+}, parent: "a")
        |> DAG.add_task!(id: "d", data: %{op: :+}, parent: "c")
        |> DAG.add_task!(id: "e", data: %{op: :+}, parent: "c")
        |> DAG.add_task!(id: "f", data: %{value: 6}, parent: "d")
        |> DAG.add_task!(id: "g", data: %{value: 5}, start_date: start_date, parent: "d")
        |> DAG.add_task!(id: "h", data: %{value: 4}, parent: "e")
        |> DAG.add_task!(id: "i", data: %{value: 3}, parent: "e")

        dag
    end

    def start() do
        dag = build_dag()
        {:ok, pid} = Server.run_dag(dag)

        ref = Process.monitor(pid)

        receive do
        {:DOWN, ^ref, _, _, _} ->
            IO.puts("Completed DAG run #{inspect(pid)} is down")
        end
    end
end
